digraph "" {
VRFConsumerBase -> VRFRequestIDBase;
VRFConsumerBase[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>VRFConsumerBase</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    rawFulfillRandomness(bytes32,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    fulfillRandomness(bytes32,uint256)</TD></TR><TR><TD align="left">    requestRandomness(bytes32,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    USER_SEED_PLACEHOLDER</TD></TR><TR><TD align="left">    LINK<font color="blue" POINT-SIZE="10"> (LinkTokenInterface)</font></TD></TR><TR><TD align="left">    vrfCoordinator</TD></TR><TR><TD align="left">    nonces</TD></TR></TABLE> >];

VRFRequestIDBase[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>VRFRequestIDBase</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    makeVRFInputSeed(bytes32,uint256,address,uint256)</TD></TR><TR><TD align="left">    makeRequestId(bytes32,uint256)</TD></TR></TABLE> >];

LinkTokenInterface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>LinkTokenInterface</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    decimals()</TD></TR><TR><TD align="left">    decreaseApproval(address,uint256)</TD></TR><TR><TD align="left">    increaseApproval(address,uint256)</TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    transferAndCall(address,uint256,bytes)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

AccessControl -> Context [ label="1" ];
AccessControl -> IAccessControl [ label="2" ];
AccessControl -> ERC165 [ label="3" ];
AccessControl[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AccessControl</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    hasRole(bytes32,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getRoleAdmin(bytes32)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    grantRole(bytes32,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    revokeRole(bytes32,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    renounceRole(bytes32,address)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _checkRole(bytes32,address)</TD></TR><TR><TD align="left">    _setupRole(bytes32,address)</TD></TR><TR><TD align="left">    _setRoleAdmin(bytes32,bytes32)</TD></TR><TR><TD align="left">    _grantRole(bytes32,address)</TD></TR><TR><TD align="left">    _revokeRole(bytes32,address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyRole(bytes32)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    DEFAULT_ADMIN_ROLE</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _roles</TD></TR></TABLE> >];

IAccessControl[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IAccessControl</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    hasRole(bytes32,address)</TD></TR><TR><TD align="left">    getRoleAdmin(bytes32)</TD></TR><TR><TD align="left">    grantRole(bytes32,address)</TD></TR><TR><TD align="left">    revokeRole(bytes32,address)</TD></TR><TR><TD align="left">    renounceRole(bytes32,address)</TD></TR></TABLE> >];

Context[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Context</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR></TABLE> >];

Strings[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Strings</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    toString(uint256)</TD></TR><TR><TD align="left">    toHexString(uint256)</TD></TR><TR><TD align="left">    toHexString(uint256,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _HEX_SYMBOLS</TD></TR></TABLE> >];

ERC165 -> IERC165;
ERC165[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC165</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR></TABLE> >];

IERC165[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC165</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    supportsInterface(bytes4)</TD></TR></TABLE> >];

BoardContract -> AccessControl [ label="1" ];
BoardContract -> VRFConsumerBase [ label="2" ];
BoardContract[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>BoardContract</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    isPurchasable(uint16,uint8)</TD></TR><TR><TD align="left">    getMaxEdition()</TD></TR><TR><TD align="left">    getNbLands(uint16)</TD></TR><TR><TD align="left">    getRarityLevel(uint16)</TD></TR><TR><TD align="left">    newBoard(uint8,uint8,uint8[],uint16)</TD></TR><TR><TD align="left">    register(uint16,uint256)</TD></TR><TR><TD align="left">    isRegistered(uint16,uint256)</TD></TR><TR><TD align="left">    play(uint16,uint256)</TD></TR><TR><TD align="left">    getPawnInfo(uint16,uint256)</TD></TR><TR><TD align="left">    setPawnInfo(uint16,uint256,BoardContract.PawnInfo)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    requestRandomNumber()</TD></TR><TR><TD align="left"><font color="#FFA500">    fulfillRandomness(bytes32,uint256)</font></TD></TR><TR><TD align="left">    gameStrategist(uint16,uint256,uint8)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    ADMIN_ROLE</TD></TR><TR><TD align="left">    MANAGER_ROLE</TD></TR><TR><TD align="left">    fee</TD></TR><TR><TD align="left">    randomResult</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    keyHash</TD></TR><TR><TD align="left">    editionMax</TD></TR><TR><TD align="left">    boards</TD></TR><TR><TD align="left">    playInfoByRequestId</TD></TR></TABLE> >];

}